// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/test.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetTestSuitesRequest struct {
}

func (m *GetTestSuitesRequest) Reset()         { *m = GetTestSuitesRequest{} }
func (m *GetTestSuitesRequest) String() string { return proto.CompactTextString(m) }
func (*GetTestSuitesRequest) ProtoMessage()    {}
func (*GetTestSuitesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{0}
}
func (m *GetTestSuitesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTestSuitesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTestSuitesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTestSuitesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTestSuitesRequest.Merge(m, src)
}
func (m *GetTestSuitesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTestSuitesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTestSuitesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTestSuitesRequest proto.InternalMessageInfo

type GetTestSuitesResponse struct {
	Suites []*TestSuite `protobuf:"bytes,1,rep,name=suites,proto3" json:"suites,omitempty"`
}

func (m *GetTestSuitesResponse) Reset()         { *m = GetTestSuitesResponse{} }
func (m *GetTestSuitesResponse) String() string { return proto.CompactTextString(m) }
func (*GetTestSuitesResponse) ProtoMessage()    {}
func (*GetTestSuitesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{1}
}
func (m *GetTestSuitesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTestSuitesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTestSuitesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTestSuitesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTestSuitesResponse.Merge(m, src)
}
func (m *GetTestSuitesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTestSuitesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTestSuitesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTestSuitesResponse proto.InternalMessageInfo

func (m *GetTestSuitesResponse) GetSuites() []*TestSuite {
	if m != nil {
		return m.Suites
	}
	return nil
}

type TestSuite struct {
	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Setup    bool    `protobuf:"varint,2,opt,name=setup,proto3" json:"setup,omitempty"`
	TearDown bool    `protobuf:"varint,3,opt,name=tear_down,json=tearDown,proto3" json:"tear_down,omitempty"`
	Tests    []*Test `protobuf:"bytes,4,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (m *TestSuite) Reset()         { *m = TestSuite{} }
func (m *TestSuite) String() string { return proto.CompactTextString(m) }
func (*TestSuite) ProtoMessage()    {}
func (*TestSuite) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{2}
}
func (m *TestSuite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSuite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSuite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSuite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSuite.Merge(m, src)
}
func (m *TestSuite) XXX_Size() int {
	return m.Size()
}
func (m *TestSuite) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSuite.DiscardUnknown(m)
}

var xxx_messageInfo_TestSuite proto.InternalMessageInfo

func (m *TestSuite) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestSuite) GetSetup() bool {
	if m != nil {
		return m.Setup
	}
	return false
}

func (m *TestSuite) GetTearDown() bool {
	if m != nil {
		return m.TearDown
	}
	return false
}

func (m *TestSuite) GetTests() []*Test {
	if m != nil {
		return m.Tests
	}
	return nil
}

type Test struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Setup    bool   `protobuf:"varint,2,opt,name=setup,proto3" json:"setup,omitempty"`
	TearDown bool   `protobuf:"varint,3,opt,name=tear_down,json=tearDown,proto3" json:"tear_down,omitempty"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{3}
}
func (m *Test) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(m, src)
}
func (m *Test) XXX_Size() int {
	return m.Size()
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

func (m *Test) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Test) GetSetup() bool {
	if m != nil {
		return m.Setup
	}
	return false
}

func (m *Test) GetTearDown() bool {
	if m != nil {
		return m.TearDown
	}
	return false
}

type SetupTestSuiteRequest struct {
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
}

func (m *SetupTestSuiteRequest) Reset()         { *m = SetupTestSuiteRequest{} }
func (m *SetupTestSuiteRequest) String() string { return proto.CompactTextString(m) }
func (*SetupTestSuiteRequest) ProtoMessage()    {}
func (*SetupTestSuiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{4}
}
func (m *SetupTestSuiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupTestSuiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupTestSuiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupTestSuiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupTestSuiteRequest.Merge(m, src)
}
func (m *SetupTestSuiteRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetupTestSuiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupTestSuiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetupTestSuiteRequest proto.InternalMessageInfo

func (m *SetupTestSuiteRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

type SetupTestSuiteResponse struct {
}

func (m *SetupTestSuiteResponse) Reset()         { *m = SetupTestSuiteResponse{} }
func (m *SetupTestSuiteResponse) String() string { return proto.CompactTextString(m) }
func (*SetupTestSuiteResponse) ProtoMessage()    {}
func (*SetupTestSuiteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{5}
}
func (m *SetupTestSuiteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupTestSuiteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupTestSuiteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupTestSuiteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupTestSuiteResponse.Merge(m, src)
}
func (m *SetupTestSuiteResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetupTestSuiteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupTestSuiteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetupTestSuiteResponse proto.InternalMessageInfo

type TearDownTestSuiteRequest struct {
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
}

func (m *TearDownTestSuiteRequest) Reset()         { *m = TearDownTestSuiteRequest{} }
func (m *TearDownTestSuiteRequest) String() string { return proto.CompactTextString(m) }
func (*TearDownTestSuiteRequest) ProtoMessage()    {}
func (*TearDownTestSuiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{6}
}
func (m *TearDownTestSuiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TearDownTestSuiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TearDownTestSuiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TearDownTestSuiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TearDownTestSuiteRequest.Merge(m, src)
}
func (m *TearDownTestSuiteRequest) XXX_Size() int {
	return m.Size()
}
func (m *TearDownTestSuiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TearDownTestSuiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TearDownTestSuiteRequest proto.InternalMessageInfo

func (m *TearDownTestSuiteRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

type TearDownTestSuiteResponse struct {
}

func (m *TearDownTestSuiteResponse) Reset()         { *m = TearDownTestSuiteResponse{} }
func (m *TearDownTestSuiteResponse) String() string { return proto.CompactTextString(m) }
func (*TearDownTestSuiteResponse) ProtoMessage()    {}
func (*TearDownTestSuiteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{7}
}
func (m *TearDownTestSuiteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TearDownTestSuiteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TearDownTestSuiteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TearDownTestSuiteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TearDownTestSuiteResponse.Merge(m, src)
}
func (m *TearDownTestSuiteResponse) XXX_Size() int {
	return m.Size()
}
func (m *TearDownTestSuiteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TearDownTestSuiteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TearDownTestSuiteResponse proto.InternalMessageInfo

type SetupTestRequest struct {
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	Test  string `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (m *SetupTestRequest) Reset()         { *m = SetupTestRequest{} }
func (m *SetupTestRequest) String() string { return proto.CompactTextString(m) }
func (*SetupTestRequest) ProtoMessage()    {}
func (*SetupTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{8}
}
func (m *SetupTestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupTestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupTestRequest.Merge(m, src)
}
func (m *SetupTestRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetupTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetupTestRequest proto.InternalMessageInfo

func (m *SetupTestRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *SetupTestRequest) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

type SetupTestResponse struct {
}

func (m *SetupTestResponse) Reset()         { *m = SetupTestResponse{} }
func (m *SetupTestResponse) String() string { return proto.CompactTextString(m) }
func (*SetupTestResponse) ProtoMessage()    {}
func (*SetupTestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{9}
}
func (m *SetupTestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupTestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupTestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupTestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupTestResponse.Merge(m, src)
}
func (m *SetupTestResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetupTestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupTestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetupTestResponse proto.InternalMessageInfo

type TearDownTestRequest struct {
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	Test  string `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (m *TearDownTestRequest) Reset()         { *m = TearDownTestRequest{} }
func (m *TearDownTestRequest) String() string { return proto.CompactTextString(m) }
func (*TearDownTestRequest) ProtoMessage()    {}
func (*TearDownTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{10}
}
func (m *TearDownTestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TearDownTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TearDownTestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TearDownTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TearDownTestRequest.Merge(m, src)
}
func (m *TearDownTestRequest) XXX_Size() int {
	return m.Size()
}
func (m *TearDownTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TearDownTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TearDownTestRequest proto.InternalMessageInfo

func (m *TearDownTestRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *TearDownTestRequest) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

type TearDownTestResponse struct {
}

func (m *TearDownTestResponse) Reset()         { *m = TearDownTestResponse{} }
func (m *TearDownTestResponse) String() string { return proto.CompactTextString(m) }
func (*TearDownTestResponse) ProtoMessage()    {}
func (*TearDownTestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{11}
}
func (m *TearDownTestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TearDownTestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TearDownTestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TearDownTestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TearDownTestResponse.Merge(m, src)
}
func (m *TearDownTestResponse) XXX_Size() int {
	return m.Size()
}
func (m *TearDownTestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TearDownTestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TearDownTestResponse proto.InternalMessageInfo

// RunTestRequest is a test request
type RunTestRequest struct {
	// suite is the test suite to run
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	// test is the test to run
	Test string `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (m *RunTestRequest) Reset()         { *m = RunTestRequest{} }
func (m *RunTestRequest) String() string { return proto.CompactTextString(m) }
func (*RunTestRequest) ProtoMessage()    {}
func (*RunTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{12}
}
func (m *RunTestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunTestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTestRequest.Merge(m, src)
}
func (m *RunTestRequest) XXX_Size() int {
	return m.Size()
}
func (m *RunTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunTestRequest proto.InternalMessageInfo

func (m *RunTestRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *RunTestRequest) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

// RunTestResponse is a test response
type RunTestResponse struct {
	Succeeded bool `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
}

func (m *RunTestResponse) Reset()         { *m = RunTestResponse{} }
func (m *RunTestResponse) String() string { return proto.CompactTextString(m) }
func (*RunTestResponse) ProtoMessage()    {}
func (*RunTestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9164e87288ef5e21, []int{13}
}
func (m *RunTestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunTestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunTestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunTestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTestResponse.Merge(m, src)
}
func (m *RunTestResponse) XXX_Size() int {
	return m.Size()
}
func (m *RunTestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunTestResponse proto.InternalMessageInfo

func (m *RunTestResponse) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func init() {
	proto.RegisterType((*GetTestSuitesRequest)(nil), "helmit.v1.GetTestSuitesRequest")
	proto.RegisterType((*GetTestSuitesResponse)(nil), "helmit.v1.GetTestSuitesResponse")
	proto.RegisterType((*TestSuite)(nil), "helmit.v1.TestSuite")
	proto.RegisterType((*Test)(nil), "helmit.v1.Test")
	proto.RegisterType((*SetupTestSuiteRequest)(nil), "helmit.v1.SetupTestSuiteRequest")
	proto.RegisterType((*SetupTestSuiteResponse)(nil), "helmit.v1.SetupTestSuiteResponse")
	proto.RegisterType((*TearDownTestSuiteRequest)(nil), "helmit.v1.TearDownTestSuiteRequest")
	proto.RegisterType((*TearDownTestSuiteResponse)(nil), "helmit.v1.TearDownTestSuiteResponse")
	proto.RegisterType((*SetupTestRequest)(nil), "helmit.v1.SetupTestRequest")
	proto.RegisterType((*SetupTestResponse)(nil), "helmit.v1.SetupTestResponse")
	proto.RegisterType((*TearDownTestRequest)(nil), "helmit.v1.TearDownTestRequest")
	proto.RegisterType((*TearDownTestResponse)(nil), "helmit.v1.TearDownTestResponse")
	proto.RegisterType((*RunTestRequest)(nil), "helmit.v1.RunTestRequest")
	proto.RegisterType((*RunTestResponse)(nil), "helmit.v1.RunTestResponse")
}

func init() { proto.RegisterFile("v1/test.proto", fileDescriptor_9164e87288ef5e21) }

var fileDescriptor_9164e87288ef5e21 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x5f, 0xcf, 0xd2, 0x30,
	0x14, 0xc6, 0x99, 0xf0, 0x22, 0x3b, 0xfa, 0x82, 0x94, 0x41, 0xca, 0x20, 0x63, 0x56, 0x4d, 0xb8,
	0xd0, 0x21, 0x78, 0x67, 0x4c, 0x34, 0xc6, 0x3f, 0x57, 0xc6, 0xa4, 0xe0, 0xad, 0x06, 0xa1, 0x89,
	0x24, 0xb2, 0x21, 0xed, 0x20, 0x7e, 0x0b, 0x3f, 0x96, 0x97, 0x5c, 0x7a, 0x69, 0xe0, 0xde, 0xcf,
	0x60, 0xda, 0x95, 0xb1, 0xe1, 0x20, 0x6a, 0xde, 0xbb, 0xf5, 0x9c, 0xa7, 0xbf, 0xa7, 0x3d, 0x7d,
	0x32, 0xb8, 0x5c, 0xf5, 0x7b, 0x82, 0x71, 0xe1, 0x2d, 0x96, 0x81, 0x08, 0x90, 0xf9, 0x89, 0x7d,
	0x9e, 0xcf, 0x84, 0xb7, 0xea, 0x93, 0x06, 0x58, 0xaf, 0x99, 0x18, 0x31, 0x2e, 0x86, 0xe1, 0x4c,
	0x30, 0x4e, 0xd9, 0x97, 0x90, 0x71, 0x41, 0x5e, 0x42, 0xfd, 0xa8, 0xce, 0x17, 0x81, 0xcf, 0x19,
	0xba, 0x0f, 0x45, 0xae, 0x2a, 0xd8, 0x70, 0xf3, 0xdd, 0x1b, 0x03, 0xcb, 0x8b, 0x61, 0x5e, 0x2c,
	0xa7, 0x5a, 0x43, 0xbe, 0x82, 0x19, 0x17, 0x11, 0x82, 0x82, 0x3f, 0x9e, 0x33, 0x6c, 0xb8, 0x46,
	0xd7, 0xa4, 0xea, 0x1b, 0x59, 0x70, 0xc1, 0x99, 0x08, 0x17, 0xf8, 0x9a, 0x6b, 0x74, 0x4b, 0x34,
	0x5a, 0xa0, 0x16, 0x98, 0x82, 0x8d, 0x97, 0x1f, 0xa6, 0xc1, 0xda, 0xc7, 0x79, 0xd5, 0x29, 0xc9,
	0xc2, 0x8b, 0x60, 0xed, 0xa3, 0x7b, 0x70, 0x21, 0xef, 0xc2, 0x71, 0x41, 0x1d, 0xa0, 0x72, 0x74,
	0x00, 0x1a, 0x75, 0xc9, 0x1b, 0x28, 0xc8, 0xe5, 0x15, 0xb9, 0x92, 0x07, 0x50, 0x1f, 0x4a, 0xd5,
	0xe1, 0x8e, 0xd1, 0xa4, 0x14, 0x4b, 0xae, 0xb5, 0x41, 0xb4, 0x20, 0x18, 0x1a, 0xc7, 0xf2, 0x68,
	0x80, 0xe4, 0x21, 0xe0, 0x91, 0x86, 0xfe, 0x25, 0xab, 0x05, 0xcd, 0x8c, 0x1d, 0x1a, 0xf7, 0x04,
	0x6e, 0xc5, 0x46, 0x67, 0x31, 0x72, 0x10, 0x72, 0x32, 0xea, 0xce, 0x26, 0x55, 0xdf, 0xa4, 0x06,
	0xd5, 0xc4, 0x6e, 0x8d, 0x7c, 0x0a, 0xb5, 0xa4, 0xdf, 0xbf, 0x53, 0x1b, 0x60, 0xa5, 0x01, 0x1a,
	0xfc, 0x18, 0xca, 0x34, 0xfc, 0x4f, 0x66, 0x0f, 0x2a, 0xf1, 0x5e, 0x1d, 0xc5, 0x36, 0x98, 0x3c,
	0x9c, 0x4c, 0x18, 0x9b, 0xb2, 0xa9, 0x02, 0x94, 0xe8, 0xa1, 0x30, 0xf8, 0x95, 0x87, 0xa2, 0x94,
	0xb3, 0x25, 0xa2, 0x70, 0x99, 0x0a, 0x33, 0xea, 0x24, 0x32, 0x93, 0x15, 0x7f, 0xdb, 0x3d, 0x2d,
	0xd0, 0xe6, 0xef, 0xa0, 0x9c, 0x7e, 0x60, 0x94, 0xdc, 0x93, 0x19, 0x15, 0xfb, 0xf6, 0x19, 0x85,
	0xc6, 0xbe, 0x87, 0xea, 0x1f, 0x6f, 0x8d, 0xee, 0xa4, 0x22, 0x9e, 0x9d, 0x1d, 0xfb, 0xee, 0x79,
	0x91, 0xe6, 0xbf, 0x02, 0x33, 0x76, 0x46, 0xad, 0xac, 0xf3, 0xec, 0x79, 0xed, 0xec, 0xa6, 0xe6,
	0xbc, 0x85, 0x9b, 0x49, 0x13, 0xe4, 0x9c, 0x70, 0xdf, 0xd3, 0x3a, 0x27, 0xfb, 0x1a, 0xf8, 0x0c,
	0xae, 0xeb, 0xf7, 0x45, 0xcd, 0x84, 0x36, 0x9d, 0x17, 0xdb, 0xce, 0x6a, 0x45, 0x84, 0xe7, 0xf8,
	0xfb, 0xd6, 0x31, 0x36, 0x5b, 0xc7, 0xf8, 0xb9, 0x75, 0x8c, 0x6f, 0x3b, 0x27, 0xb7, 0xd9, 0x39,
	0xb9, 0x1f, 0x3b, 0x27, 0xf7, 0xb1, 0xa8, 0x7e, 0x7b, 0x8f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x49, 0x86, 0xbd, 0xb1, 0x07, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TesterClient is the client API for Tester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TesterClient interface {
	GetTestSuites(ctx context.Context, in *GetTestSuitesRequest, opts ...grpc.CallOption) (*GetTestSuitesResponse, error)
	SetupTestSuite(ctx context.Context, in *SetupTestSuiteRequest, opts ...grpc.CallOption) (*SetupTestSuiteResponse, error)
	TearDownTestSuite(ctx context.Context, in *TearDownTestSuiteRequest, opts ...grpc.CallOption) (*TearDownTestSuiteResponse, error)
	SetupTest(ctx context.Context, in *SetupTestRequest, opts ...grpc.CallOption) (*SetupTestResponse, error)
	TearDownTest(ctx context.Context, in *TearDownTestRequest, opts ...grpc.CallOption) (*TearDownTestResponse, error)
	RunTest(ctx context.Context, in *RunTestRequest, opts ...grpc.CallOption) (*RunTestResponse, error)
}

type testerClient struct {
	cc *grpc.ClientConn
}

func NewTesterClient(cc *grpc.ClientConn) TesterClient {
	return &testerClient{cc}
}

func (c *testerClient) GetTestSuites(ctx context.Context, in *GetTestSuitesRequest, opts ...grpc.CallOption) (*GetTestSuitesResponse, error) {
	out := new(GetTestSuitesResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Tester/GetTestSuites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) SetupTestSuite(ctx context.Context, in *SetupTestSuiteRequest, opts ...grpc.CallOption) (*SetupTestSuiteResponse, error) {
	out := new(SetupTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Tester/SetupTestSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) TearDownTestSuite(ctx context.Context, in *TearDownTestSuiteRequest, opts ...grpc.CallOption) (*TearDownTestSuiteResponse, error) {
	out := new(TearDownTestSuiteResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Tester/TearDownTestSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) SetupTest(ctx context.Context, in *SetupTestRequest, opts ...grpc.CallOption) (*SetupTestResponse, error) {
	out := new(SetupTestResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Tester/SetupTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) TearDownTest(ctx context.Context, in *TearDownTestRequest, opts ...grpc.CallOption) (*TearDownTestResponse, error) {
	out := new(TearDownTestResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Tester/TearDownTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) RunTest(ctx context.Context, in *RunTestRequest, opts ...grpc.CallOption) (*RunTestResponse, error) {
	out := new(RunTestResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Tester/RunTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TesterServer is the server API for Tester service.
type TesterServer interface {
	GetTestSuites(context.Context, *GetTestSuitesRequest) (*GetTestSuitesResponse, error)
	SetupTestSuite(context.Context, *SetupTestSuiteRequest) (*SetupTestSuiteResponse, error)
	TearDownTestSuite(context.Context, *TearDownTestSuiteRequest) (*TearDownTestSuiteResponse, error)
	SetupTest(context.Context, *SetupTestRequest) (*SetupTestResponse, error)
	TearDownTest(context.Context, *TearDownTestRequest) (*TearDownTestResponse, error)
	RunTest(context.Context, *RunTestRequest) (*RunTestResponse, error)
}

// UnimplementedTesterServer can be embedded to have forward compatible implementations.
type UnimplementedTesterServer struct {
}

func (*UnimplementedTesterServer) GetTestSuites(ctx context.Context, req *GetTestSuitesRequest) (*GetTestSuitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestSuites not implemented")
}
func (*UnimplementedTesterServer) SetupTestSuite(ctx context.Context, req *SetupTestSuiteRequest) (*SetupTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupTestSuite not implemented")
}
func (*UnimplementedTesterServer) TearDownTestSuite(ctx context.Context, req *TearDownTestSuiteRequest) (*TearDownTestSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownTestSuite not implemented")
}
func (*UnimplementedTesterServer) SetupTest(ctx context.Context, req *SetupTestRequest) (*SetupTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupTest not implemented")
}
func (*UnimplementedTesterServer) TearDownTest(ctx context.Context, req *TearDownTestRequest) (*TearDownTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownTest not implemented")
}
func (*UnimplementedTesterServer) RunTest(ctx context.Context, req *RunTestRequest) (*RunTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTest not implemented")
}

func RegisterTesterServer(s *grpc.Server, srv TesterServer) {
	s.RegisterService(&_Tester_serviceDesc, srv)
}

func _Tester_GetTestSuites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestSuitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).GetTestSuites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Tester/GetTestSuites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).GetTestSuites(ctx, req.(*GetTestSuitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_SetupTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).SetupTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Tester/SetupTestSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).SetupTestSuite(ctx, req.(*SetupTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_TearDownTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TearDownTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).TearDownTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Tester/TearDownTestSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).TearDownTestSuite(ctx, req.(*TearDownTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_SetupTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).SetupTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Tester/SetupTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).SetupTest(ctx, req.(*SetupTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_TearDownTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TearDownTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).TearDownTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Tester/TearDownTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).TearDownTest(ctx, req.(*TearDownTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_RunTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).RunTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Tester/RunTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).RunTest(ctx, req.(*RunTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tester_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helmit.v1.Tester",
	HandlerType: (*TesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTestSuites",
			Handler:    _Tester_GetTestSuites_Handler,
		},
		{
			MethodName: "SetupTestSuite",
			Handler:    _Tester_SetupTestSuite_Handler,
		},
		{
			MethodName: "TearDownTestSuite",
			Handler:    _Tester_TearDownTestSuite_Handler,
		},
		{
			MethodName: "SetupTest",
			Handler:    _Tester_SetupTest_Handler,
		},
		{
			MethodName: "TearDownTest",
			Handler:    _Tester_TearDownTest_Handler,
		},
		{
			MethodName: "RunTest",
			Handler:    _Tester_RunTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/test.proto",
}

func (m *GetTestSuitesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTestSuitesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTestSuitesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTestSuitesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTestSuitesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTestSuitesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suites) > 0 {
		for iNdEx := len(m.Suites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Suites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestSuite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSuite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSuite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tests) > 0 {
		for iNdEx := len(m.Tests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TearDown {
		i--
		if m.TearDown {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Setup {
		i--
		if m.Setup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Test) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Test) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TearDown {
		i--
		if m.TearDown {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Setup {
		i--
		if m.Setup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetupTestSuiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupTestSuiteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupTestSuiteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetupTestSuiteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupTestSuiteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupTestSuiteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TearDownTestSuiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TearDownTestSuiteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TearDownTestSuiteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TearDownTestSuiteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TearDownTestSuiteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TearDownTestSuiteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetupTestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupTestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupTestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Test) > 0 {
		i -= len(m.Test)
		copy(dAtA[i:], m.Test)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Test)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetupTestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupTestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupTestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TearDownTestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TearDownTestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TearDownTestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Test) > 0 {
		i -= len(m.Test)
		copy(dAtA[i:], m.Test)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Test)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TearDownTestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TearDownTestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TearDownTestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RunTestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunTestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunTestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Test) > 0 {
		i -= len(m.Test)
		copy(dAtA[i:], m.Test)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Test)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunTestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunTestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunTestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Succeeded {
		i--
		if m.Succeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetTestSuitesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTestSuitesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Suites) > 0 {
		for _, e := range m.Suites {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	return n
}

func (m *TestSuite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Setup {
		n += 2
	}
	if m.TearDown {
		n += 2
	}
	if len(m.Tests) > 0 {
		for _, e := range m.Tests {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	return n
}

func (m *Test) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Setup {
		n += 2
	}
	if m.TearDown {
		n += 2
	}
	return n
}

func (m *SetupTestSuiteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func (m *SetupTestSuiteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TearDownTestSuiteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func (m *TearDownTestSuiteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetupTestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Test)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func (m *SetupTestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TearDownTestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Test)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func (m *TearDownTestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RunTestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.Test)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func (m *RunTestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Succeeded {
		n += 2
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetTestSuitesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTestSuitesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTestSuitesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTestSuitesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTestSuitesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTestSuitesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suites = append(m.Suites, &TestSuite{})
			if err := m.Suites[len(m.Suites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSuite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSuite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSuite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Setup = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TearDown", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TearDown = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tests = append(m.Tests, &Test{})
			if err := m.Tests[len(m.Tests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Test) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Test: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Test: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Setup = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TearDown", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TearDown = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupTestSuiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupTestSuiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupTestSuiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupTestSuiteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupTestSuiteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupTestSuiteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TearDownTestSuiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TearDownTestSuiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TearDownTestSuiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TearDownTestSuiteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TearDownTestSuiteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TearDownTestSuiteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupTestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupTestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupTestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Test = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupTestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupTestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupTestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TearDownTestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TearDownTestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TearDownTestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Test = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TearDownTestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TearDownTestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TearDownTestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunTestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunTestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunTestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Test = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunTestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunTestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunTestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeeded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
