// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/bench.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SetupBenchmarkSuiteRequest struct {
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
}

func (m *SetupBenchmarkSuiteRequest) Reset()         { *m = SetupBenchmarkSuiteRequest{} }
func (m *SetupBenchmarkSuiteRequest) String() string { return proto.CompactTextString(m) }
func (*SetupBenchmarkSuiteRequest) ProtoMessage()    {}
func (*SetupBenchmarkSuiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{0}
}
func (m *SetupBenchmarkSuiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupBenchmarkSuiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupBenchmarkSuiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupBenchmarkSuiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupBenchmarkSuiteRequest.Merge(m, src)
}
func (m *SetupBenchmarkSuiteRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetupBenchmarkSuiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupBenchmarkSuiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetupBenchmarkSuiteRequest proto.InternalMessageInfo

func (m *SetupBenchmarkSuiteRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

type SetupBenchmarkSuiteResponse struct {
}

func (m *SetupBenchmarkSuiteResponse) Reset()         { *m = SetupBenchmarkSuiteResponse{} }
func (m *SetupBenchmarkSuiteResponse) String() string { return proto.CompactTextString(m) }
func (*SetupBenchmarkSuiteResponse) ProtoMessage()    {}
func (*SetupBenchmarkSuiteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{1}
}
func (m *SetupBenchmarkSuiteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupBenchmarkSuiteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupBenchmarkSuiteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupBenchmarkSuiteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupBenchmarkSuiteResponse.Merge(m, src)
}
func (m *SetupBenchmarkSuiteResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetupBenchmarkSuiteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupBenchmarkSuiteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetupBenchmarkSuiteResponse proto.InternalMessageInfo

type TearDownBenchmarkSuiteRequest struct {
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
}

func (m *TearDownBenchmarkSuiteRequest) Reset()         { *m = TearDownBenchmarkSuiteRequest{} }
func (m *TearDownBenchmarkSuiteRequest) String() string { return proto.CompactTextString(m) }
func (*TearDownBenchmarkSuiteRequest) ProtoMessage()    {}
func (*TearDownBenchmarkSuiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{2}
}
func (m *TearDownBenchmarkSuiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TearDownBenchmarkSuiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TearDownBenchmarkSuiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TearDownBenchmarkSuiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TearDownBenchmarkSuiteRequest.Merge(m, src)
}
func (m *TearDownBenchmarkSuiteRequest) XXX_Size() int {
	return m.Size()
}
func (m *TearDownBenchmarkSuiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TearDownBenchmarkSuiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TearDownBenchmarkSuiteRequest proto.InternalMessageInfo

func (m *TearDownBenchmarkSuiteRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

type TearDownBenchmarkSuiteResponse struct {
}

func (m *TearDownBenchmarkSuiteResponse) Reset()         { *m = TearDownBenchmarkSuiteResponse{} }
func (m *TearDownBenchmarkSuiteResponse) String() string { return proto.CompactTextString(m) }
func (*TearDownBenchmarkSuiteResponse) ProtoMessage()    {}
func (*TearDownBenchmarkSuiteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{3}
}
func (m *TearDownBenchmarkSuiteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TearDownBenchmarkSuiteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TearDownBenchmarkSuiteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TearDownBenchmarkSuiteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TearDownBenchmarkSuiteResponse.Merge(m, src)
}
func (m *TearDownBenchmarkSuiteResponse) XXX_Size() int {
	return m.Size()
}
func (m *TearDownBenchmarkSuiteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TearDownBenchmarkSuiteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TearDownBenchmarkSuiteResponse proto.InternalMessageInfo

type SetupBenchmarkWorkerRequest struct {
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
}

func (m *SetupBenchmarkWorkerRequest) Reset()         { *m = SetupBenchmarkWorkerRequest{} }
func (m *SetupBenchmarkWorkerRequest) String() string { return proto.CompactTextString(m) }
func (*SetupBenchmarkWorkerRequest) ProtoMessage()    {}
func (*SetupBenchmarkWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{4}
}
func (m *SetupBenchmarkWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupBenchmarkWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupBenchmarkWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupBenchmarkWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupBenchmarkWorkerRequest.Merge(m, src)
}
func (m *SetupBenchmarkWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetupBenchmarkWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupBenchmarkWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetupBenchmarkWorkerRequest proto.InternalMessageInfo

func (m *SetupBenchmarkWorkerRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

type SetupBenchmarkWorkerResponse struct {
}

func (m *SetupBenchmarkWorkerResponse) Reset()         { *m = SetupBenchmarkWorkerResponse{} }
func (m *SetupBenchmarkWorkerResponse) String() string { return proto.CompactTextString(m) }
func (*SetupBenchmarkWorkerResponse) ProtoMessage()    {}
func (*SetupBenchmarkWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{5}
}
func (m *SetupBenchmarkWorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupBenchmarkWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupBenchmarkWorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupBenchmarkWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupBenchmarkWorkerResponse.Merge(m, src)
}
func (m *SetupBenchmarkWorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetupBenchmarkWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupBenchmarkWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetupBenchmarkWorkerResponse proto.InternalMessageInfo

type TearDownBenchmarkWorkerRequest struct {
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
}

func (m *TearDownBenchmarkWorkerRequest) Reset()         { *m = TearDownBenchmarkWorkerRequest{} }
func (m *TearDownBenchmarkWorkerRequest) String() string { return proto.CompactTextString(m) }
func (*TearDownBenchmarkWorkerRequest) ProtoMessage()    {}
func (*TearDownBenchmarkWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{6}
}
func (m *TearDownBenchmarkWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TearDownBenchmarkWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TearDownBenchmarkWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TearDownBenchmarkWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TearDownBenchmarkWorkerRequest.Merge(m, src)
}
func (m *TearDownBenchmarkWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *TearDownBenchmarkWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TearDownBenchmarkWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TearDownBenchmarkWorkerRequest proto.InternalMessageInfo

func (m *TearDownBenchmarkWorkerRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

type TearDownBenchmarkWorkerResponse struct {
}

func (m *TearDownBenchmarkWorkerResponse) Reset()         { *m = TearDownBenchmarkWorkerResponse{} }
func (m *TearDownBenchmarkWorkerResponse) String() string { return proto.CompactTextString(m) }
func (*TearDownBenchmarkWorkerResponse) ProtoMessage()    {}
func (*TearDownBenchmarkWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{7}
}
func (m *TearDownBenchmarkWorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TearDownBenchmarkWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TearDownBenchmarkWorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TearDownBenchmarkWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TearDownBenchmarkWorkerResponse.Merge(m, src)
}
func (m *TearDownBenchmarkWorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *TearDownBenchmarkWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TearDownBenchmarkWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TearDownBenchmarkWorkerResponse proto.InternalMessageInfo

type SetupBenchmarkRequest struct {
	Suite     string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	Benchmark string `protobuf:"bytes,2,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
}

func (m *SetupBenchmarkRequest) Reset()         { *m = SetupBenchmarkRequest{} }
func (m *SetupBenchmarkRequest) String() string { return proto.CompactTextString(m) }
func (*SetupBenchmarkRequest) ProtoMessage()    {}
func (*SetupBenchmarkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{8}
}
func (m *SetupBenchmarkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupBenchmarkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupBenchmarkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupBenchmarkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupBenchmarkRequest.Merge(m, src)
}
func (m *SetupBenchmarkRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetupBenchmarkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupBenchmarkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetupBenchmarkRequest proto.InternalMessageInfo

func (m *SetupBenchmarkRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *SetupBenchmarkRequest) GetBenchmark() string {
	if m != nil {
		return m.Benchmark
	}
	return ""
}

type SetupBenchmarkResponse struct {
}

func (m *SetupBenchmarkResponse) Reset()         { *m = SetupBenchmarkResponse{} }
func (m *SetupBenchmarkResponse) String() string { return proto.CompactTextString(m) }
func (*SetupBenchmarkResponse) ProtoMessage()    {}
func (*SetupBenchmarkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{9}
}
func (m *SetupBenchmarkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupBenchmarkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupBenchmarkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupBenchmarkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupBenchmarkResponse.Merge(m, src)
}
func (m *SetupBenchmarkResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetupBenchmarkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupBenchmarkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetupBenchmarkResponse proto.InternalMessageInfo

type TearDownBenchmarkRequest struct {
	Suite     string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	Benchmark string `protobuf:"bytes,2,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
}

func (m *TearDownBenchmarkRequest) Reset()         { *m = TearDownBenchmarkRequest{} }
func (m *TearDownBenchmarkRequest) String() string { return proto.CompactTextString(m) }
func (*TearDownBenchmarkRequest) ProtoMessage()    {}
func (*TearDownBenchmarkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{10}
}
func (m *TearDownBenchmarkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TearDownBenchmarkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TearDownBenchmarkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TearDownBenchmarkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TearDownBenchmarkRequest.Merge(m, src)
}
func (m *TearDownBenchmarkRequest) XXX_Size() int {
	return m.Size()
}
func (m *TearDownBenchmarkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TearDownBenchmarkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TearDownBenchmarkRequest proto.InternalMessageInfo

func (m *TearDownBenchmarkRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *TearDownBenchmarkRequest) GetBenchmark() string {
	if m != nil {
		return m.Benchmark
	}
	return ""
}

type TearDownBenchmarkResponse struct {
}

func (m *TearDownBenchmarkResponse) Reset()         { *m = TearDownBenchmarkResponse{} }
func (m *TearDownBenchmarkResponse) String() string { return proto.CompactTextString(m) }
func (*TearDownBenchmarkResponse) ProtoMessage()    {}
func (*TearDownBenchmarkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{11}
}
func (m *TearDownBenchmarkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TearDownBenchmarkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TearDownBenchmarkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TearDownBenchmarkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TearDownBenchmarkResponse.Merge(m, src)
}
func (m *TearDownBenchmarkResponse) XXX_Size() int {
	return m.Size()
}
func (m *TearDownBenchmarkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TearDownBenchmarkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TearDownBenchmarkResponse proto.InternalMessageInfo

type StartBenchmarkRequest struct {
	// The benchmark suite to start
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	// The benchmark method to start
	Benchmark string `protobuf:"bytes,2,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	// The number of threads to start
	Parallelism uint32 `protobuf:"varint,3,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	// The call timeout
	Timeout *types.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *StartBenchmarkRequest) Reset()         { *m = StartBenchmarkRequest{} }
func (m *StartBenchmarkRequest) String() string { return proto.CompactTextString(m) }
func (*StartBenchmarkRequest) ProtoMessage()    {}
func (*StartBenchmarkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{12}
}
func (m *StartBenchmarkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartBenchmarkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartBenchmarkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartBenchmarkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartBenchmarkRequest.Merge(m, src)
}
func (m *StartBenchmarkRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartBenchmarkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartBenchmarkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartBenchmarkRequest proto.InternalMessageInfo

func (m *StartBenchmarkRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *StartBenchmarkRequest) GetBenchmark() string {
	if m != nil {
		return m.Benchmark
	}
	return ""
}

func (m *StartBenchmarkRequest) GetParallelism() uint32 {
	if m != nil {
		return m.Parallelism
	}
	return 0
}

func (m *StartBenchmarkRequest) GetTimeout() *types.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

type StartBenchmarkResponse struct {
}

func (m *StartBenchmarkResponse) Reset()         { *m = StartBenchmarkResponse{} }
func (m *StartBenchmarkResponse) String() string { return proto.CompactTextString(m) }
func (*StartBenchmarkResponse) ProtoMessage()    {}
func (*StartBenchmarkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{13}
}
func (m *StartBenchmarkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartBenchmarkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartBenchmarkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartBenchmarkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartBenchmarkResponse.Merge(m, src)
}
func (m *StartBenchmarkResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartBenchmarkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartBenchmarkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartBenchmarkResponse proto.InternalMessageInfo

type StopBenchmarkRequest struct {
	// The benchmark suite to stop
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	// The benchmark method to stop
	Benchmark string `protobuf:"bytes,2,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
}

func (m *StopBenchmarkRequest) Reset()         { *m = StopBenchmarkRequest{} }
func (m *StopBenchmarkRequest) String() string { return proto.CompactTextString(m) }
func (*StopBenchmarkRequest) ProtoMessage()    {}
func (*StopBenchmarkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{14}
}
func (m *StopBenchmarkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopBenchmarkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopBenchmarkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopBenchmarkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopBenchmarkRequest.Merge(m, src)
}
func (m *StopBenchmarkRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopBenchmarkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopBenchmarkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopBenchmarkRequest proto.InternalMessageInfo

func (m *StopBenchmarkRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *StopBenchmarkRequest) GetBenchmark() string {
	if m != nil {
		return m.Benchmark
	}
	return ""
}

type StopBenchmarkResponse struct {
}

func (m *StopBenchmarkResponse) Reset()         { *m = StopBenchmarkResponse{} }
func (m *StopBenchmarkResponse) String() string { return proto.CompactTextString(m) }
func (*StopBenchmarkResponse) ProtoMessage()    {}
func (*StopBenchmarkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{15}
}
func (m *StopBenchmarkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopBenchmarkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopBenchmarkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopBenchmarkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopBenchmarkResponse.Merge(m, src)
}
func (m *StopBenchmarkResponse) XXX_Size() int {
	return m.Size()
}
func (m *StopBenchmarkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopBenchmarkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopBenchmarkResponse proto.InternalMessageInfo

type ReportBenchmarkRequest struct {
	// The benchmark suite to report
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	// The benchmark method to report
	Benchmark string `protobuf:"bytes,2,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
}

func (m *ReportBenchmarkRequest) Reset()         { *m = ReportBenchmarkRequest{} }
func (m *ReportBenchmarkRequest) String() string { return proto.CompactTextString(m) }
func (*ReportBenchmarkRequest) ProtoMessage()    {}
func (*ReportBenchmarkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{16}
}
func (m *ReportBenchmarkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportBenchmarkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportBenchmarkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportBenchmarkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportBenchmarkRequest.Merge(m, src)
}
func (m *ReportBenchmarkRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportBenchmarkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportBenchmarkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportBenchmarkRequest proto.InternalMessageInfo

func (m *ReportBenchmarkRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *ReportBenchmarkRequest) GetBenchmark() string {
	if m != nil {
		return m.Benchmark
	}
	return ""
}

type ReportBenchmarkResponse struct {
	Report *BenchmarkReport `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (m *ReportBenchmarkResponse) Reset()         { *m = ReportBenchmarkResponse{} }
func (m *ReportBenchmarkResponse) String() string { return proto.CompactTextString(m) }
func (*ReportBenchmarkResponse) ProtoMessage()    {}
func (*ReportBenchmarkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{17}
}
func (m *ReportBenchmarkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportBenchmarkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportBenchmarkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportBenchmarkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportBenchmarkResponse.Merge(m, src)
}
func (m *ReportBenchmarkResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReportBenchmarkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportBenchmarkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportBenchmarkResponse proto.InternalMessageInfo

func (m *ReportBenchmarkResponse) GetReport() *BenchmarkReport {
	if m != nil {
		return m.Report
	}
	return nil
}

type BenchmarkReport struct {
	// iterations is the number of iterations over the given duration
	Iterations uint64 `protobuf:"varint,1,opt,name=iterations,proto3" json:"iterations,omitempty"`
	// duration is the duration of the test run
	Duration *types.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// mean_latency is the mean latency
	MeanLatency *types.Duration `protobuf:"bytes,3,opt,name=mean_latency,json=meanLatency,proto3" json:"mean_latency,omitempty"`
	// latency* are latency percentiles
	P50Latency *types.Duration `protobuf:"bytes,4,opt,name=p50_latency,json=p50Latency,proto3" json:"p50_latency,omitempty"`
	P75Latency *types.Duration `protobuf:"bytes,5,opt,name=p75_latency,json=p75Latency,proto3" json:"p75_latency,omitempty"`
	P95Latency *types.Duration `protobuf:"bytes,6,opt,name=p95_latency,json=p95Latency,proto3" json:"p95_latency,omitempty"`
	P99Latency *types.Duration `protobuf:"bytes,7,opt,name=p99_latency,json=p99Latency,proto3" json:"p99_latency,omitempty"`
}

func (m *BenchmarkReport) Reset()         { *m = BenchmarkReport{} }
func (m *BenchmarkReport) String() string { return proto.CompactTextString(m) }
func (*BenchmarkReport) ProtoMessage()    {}
func (*BenchmarkReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6c048abac40978, []int{18}
}
func (m *BenchmarkReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BenchmarkReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BenchmarkReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BenchmarkReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchmarkReport.Merge(m, src)
}
func (m *BenchmarkReport) XXX_Size() int {
	return m.Size()
}
func (m *BenchmarkReport) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchmarkReport.DiscardUnknown(m)
}

var xxx_messageInfo_BenchmarkReport proto.InternalMessageInfo

func (m *BenchmarkReport) GetIterations() uint64 {
	if m != nil {
		return m.Iterations
	}
	return 0
}

func (m *BenchmarkReport) GetDuration() *types.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *BenchmarkReport) GetMeanLatency() *types.Duration {
	if m != nil {
		return m.MeanLatency
	}
	return nil
}

func (m *BenchmarkReport) GetP50Latency() *types.Duration {
	if m != nil {
		return m.P50Latency
	}
	return nil
}

func (m *BenchmarkReport) GetP75Latency() *types.Duration {
	if m != nil {
		return m.P75Latency
	}
	return nil
}

func (m *BenchmarkReport) GetP95Latency() *types.Duration {
	if m != nil {
		return m.P95Latency
	}
	return nil
}

func (m *BenchmarkReport) GetP99Latency() *types.Duration {
	if m != nil {
		return m.P99Latency
	}
	return nil
}

func init() {
	proto.RegisterType((*SetupBenchmarkSuiteRequest)(nil), "helmit.v1.SetupBenchmarkSuiteRequest")
	proto.RegisterType((*SetupBenchmarkSuiteResponse)(nil), "helmit.v1.SetupBenchmarkSuiteResponse")
	proto.RegisterType((*TearDownBenchmarkSuiteRequest)(nil), "helmit.v1.TearDownBenchmarkSuiteRequest")
	proto.RegisterType((*TearDownBenchmarkSuiteResponse)(nil), "helmit.v1.TearDownBenchmarkSuiteResponse")
	proto.RegisterType((*SetupBenchmarkWorkerRequest)(nil), "helmit.v1.SetupBenchmarkWorkerRequest")
	proto.RegisterType((*SetupBenchmarkWorkerResponse)(nil), "helmit.v1.SetupBenchmarkWorkerResponse")
	proto.RegisterType((*TearDownBenchmarkWorkerRequest)(nil), "helmit.v1.TearDownBenchmarkWorkerRequest")
	proto.RegisterType((*TearDownBenchmarkWorkerResponse)(nil), "helmit.v1.TearDownBenchmarkWorkerResponse")
	proto.RegisterType((*SetupBenchmarkRequest)(nil), "helmit.v1.SetupBenchmarkRequest")
	proto.RegisterType((*SetupBenchmarkResponse)(nil), "helmit.v1.SetupBenchmarkResponse")
	proto.RegisterType((*TearDownBenchmarkRequest)(nil), "helmit.v1.TearDownBenchmarkRequest")
	proto.RegisterType((*TearDownBenchmarkResponse)(nil), "helmit.v1.TearDownBenchmarkResponse")
	proto.RegisterType((*StartBenchmarkRequest)(nil), "helmit.v1.StartBenchmarkRequest")
	proto.RegisterType((*StartBenchmarkResponse)(nil), "helmit.v1.StartBenchmarkResponse")
	proto.RegisterType((*StopBenchmarkRequest)(nil), "helmit.v1.StopBenchmarkRequest")
	proto.RegisterType((*StopBenchmarkResponse)(nil), "helmit.v1.StopBenchmarkResponse")
	proto.RegisterType((*ReportBenchmarkRequest)(nil), "helmit.v1.ReportBenchmarkRequest")
	proto.RegisterType((*ReportBenchmarkResponse)(nil), "helmit.v1.ReportBenchmarkResponse")
	proto.RegisterType((*BenchmarkReport)(nil), "helmit.v1.BenchmarkReport")
}

func init() { proto.RegisterFile("v1/bench.proto", fileDescriptor_ea6c048abac40978) }

var fileDescriptor_ea6c048abac40978 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x73, 0x93, 0x4e,
	0x18, 0x2f, 0xff, 0xb6, 0xe9, 0xbf, 0x0f, 0xb6, 0x1d, 0xd7, 0x34, 0xa1, 0xb4, 0xa5, 0x14, 0xdf,
	0xa2, 0x07, 0xd2, 0x26, 0x83, 0x9d, 0x38, 0x9e, 0x3a, 0x3d, 0x69, 0xf5, 0x40, 0x74, 0xf4, 0xa4,
	0x43, 0xda, 0x35, 0x65, 0x0a, 0x2c, 0xc2, 0x52, 0xc7, 0x6f, 0xe1, 0xc9, 0x0f, 0xe0, 0xa7, 0xf1,
	0xd8, 0xa3, 0x47, 0x27, 0xf9, 0x14, 0xde, 0x9c, 0xc0, 0x42, 0x21, 0x01, 0x12, 0xc7, 0x1c, 0xd9,
	0xfd, 0xbd, 0xcd, 0x3e, 0x0f, 0x3f, 0x58, 0xbf, 0x3a, 0x6c, 0xf6, 0xb0, 0x73, 0x76, 0xa1, 0xba,
	0x1e, 0xa1, 0x04, 0xad, 0x5e, 0x60, 0xcb, 0x36, 0xa9, 0x7a, 0x75, 0x28, 0x4a, 0x7d, 0x42, 0xfa,
	0x16, 0x6e, 0x86, 0x17, 0xbd, 0xe0, 0x63, 0xf3, 0x3c, 0xf0, 0x0c, 0x6a, 0x12, 0x27, 0x82, 0x2a,
	0x2d, 0x10, 0xbb, 0x98, 0x06, 0xee, 0xf1, 0x88, 0x6e, 0x1b, 0xde, 0x65, 0x37, 0x30, 0x29, 0xd6,
	0xf1, 0xa7, 0x00, 0xfb, 0x14, 0x55, 0x61, 0xd9, 0x1f, 0x7d, 0x0b, 0x9c, 0xcc, 0x35, 0x56, 0xf5,
	0xe8, 0x43, 0xd9, 0x85, 0xed, 0x5c, 0x8e, 0xef, 0x12, 0xc7, 0xc7, 0x8a, 0x06, 0xbb, 0xaf, 0xb1,
	0xe1, 0x9d, 0x90, 0xcf, 0xce, 0xdf, 0xa8, 0xca, 0x20, 0x15, 0xd1, 0x98, 0x70, 0x7b, 0xdc, 0xf7,
	0x2d, 0xf1, 0x2e, 0xb1, 0x57, 0x2e, 0x2b, 0xc1, 0x4e, 0x3e, 0x89, 0x89, 0x3e, 0xc9, 0xb1, 0x9d,
	0x45, 0x77, 0x1f, 0xf6, 0x0a, 0x79, 0x4c, 0xfa, 0x05, 0x6c, 0x66, 0xad, 0x4b, 0x15, 0xd1, 0x0e,
	0xac, 0xf6, 0x62, 0xa4, 0xf0, 0x5f, 0x78, 0x73, 0x73, 0xa0, 0x08, 0x50, 0x1b, 0x17, 0x63, 0x36,
	0xaf, 0x40, 0x98, 0x48, 0xf2, 0x2f, 0x4e, 0xdb, 0xb0, 0x95, 0xa3, 0xc7, 0xcc, 0xbe, 0x73, 0xb0,
	0xd9, 0xa5, 0x86, 0x47, 0xe7, 0x61, 0x85, 0x64, 0xe0, 0x5d, 0xc3, 0x33, 0x2c, 0x0b, 0x5b, 0xa6,
	0x6f, 0x0b, 0x8b, 0x32, 0xd7, 0x58, 0xd3, 0xd3, 0x47, 0xa8, 0x0d, 0x2b, 0xd4, 0xb4, 0x31, 0x09,
	0xa8, 0xb0, 0x24, 0x73, 0x0d, 0xbe, 0xb5, 0xa5, 0x46, 0x1b, 0xad, 0xc6, 0x1b, 0xad, 0x9e, 0xb0,
	0x8d, 0xd6, 0x63, 0x64, 0xf8, 0x56, 0x63, 0x19, 0x59, 0xfc, 0xe7, 0x50, 0xed, 0x52, 0x32, 0x9f,
	0x89, 0xd4, 0x47, 0x2f, 0x41, 0x72, 0x06, 0x72, 0x0a, 0x35, 0x1d, 0xbb, 0x64, 0x3e, 0x6f, 0xa4,
	0xbc, 0x84, 0xfa, 0x84, 0x5a, 0x64, 0x84, 0x5a, 0x50, 0xf1, 0xc2, 0xab, 0x50, 0x8f, 0x6f, 0x89,
	0x6a, 0xf2, 0xe3, 0xab, 0x29, 0xf4, 0x08, 0xa1, 0x33, 0xa4, 0xf2, 0x6d, 0x11, 0x36, 0xc6, 0xee,
	0x90, 0x04, 0x60, 0x52, 0x1c, 0xbd, 0xa2, 0x1f, 0x6a, 0x2d, 0xe9, 0xa9, 0x13, 0xa4, 0xc1, 0xff,
	0x71, 0x6d, 0x84, 0xf9, 0x4a, 0xa7, 0x90, 0x40, 0xd1, 0x33, 0xb8, 0x65, 0x63, 0xc3, 0xf9, 0x60,
	0x19, 0x14, 0x3b, 0x67, 0x5f, 0xc2, 0xf1, 0x96, 0x52, 0xf9, 0x11, 0xfc, 0x34, 0x42, 0xa3, 0xa7,
	0xc0, 0xbb, 0xda, 0x41, 0x42, 0x9e, 0x3a, 0x7d, 0x70, 0xb5, 0x83, 0x34, 0xf7, 0x48, 0x4b, 0xb8,
	0xcb, 0xd3, 0xb9, 0x47, 0x5a, 0x9a, 0xdb, 0xb9, 0xe1, 0x56, 0xa6, 0x73, 0x3b, 0x59, 0x6e, 0x27,
	0xe1, 0xae, 0xcc, 0xc0, 0xed, 0x30, 0x6e, 0xeb, 0x77, 0x05, 0xf8, 0x64, 0x30, 0xd8, 0x43, 0xe7,
	0x70, 0x27, 0xa7, 0x65, 0xd1, 0xfd, 0xd4, 0x8c, 0x8b, 0x9b, 0x5b, 0x7c, 0x30, 0x0d, 0xc6, 0x56,
	0xc8, 0x86, 0x5a, 0x7e, 0xeb, 0xa2, 0x46, 0x4a, 0xa1, 0xb4, 0xcf, 0xc5, 0x47, 0x33, 0x20, 0x99,
	0x5d, 0x1f, 0xaa, 0x79, 0x6d, 0x8c, 0x8a, 0xe3, 0x66, 0xba, 0x58, 0x7c, 0x38, 0x15, 0xc7, 0x8c,
	0x5c, 0xa8, 0x17, 0xd4, 0x33, 0x2a, 0x8d, 0x9b, 0xb5, 0x7b, 0x3c, 0x0b, 0x94, 0x39, 0xbe, 0x81,
	0xf5, 0x6c, 0x22, 0x24, 0x17, 0x86, 0x8d, 0xf5, 0xf7, 0x4b, 0x10, 0x4c, 0xf6, 0x3d, 0xdc, 0x9e,
	0x70, 0x46, 0x77, 0xcb, 0x72, 0xc5, 0xe2, 0xf7, 0xca, 0x41, 0xa9, 0xd8, 0x99, 0xae, 0xcc, 0xc6,
	0xce, 0xab, 0xfa, 0x6c, 0xec, 0xdc, 0xa2, 0x45, 0x3a, 0xac, 0x65, 0xca, 0x11, 0xed, 0x65, 0x38,
	0x93, 0x15, 0x2c, 0xca, 0xc5, 0x00, 0xa6, 0xf9, 0x0e, 0x36, 0xc6, 0x9a, 0x10, 0xa5, 0x93, 0xe4,
	0x77, 0xae, 0xa8, 0x94, 0x41, 0x22, 0xe5, 0x63, 0xe1, 0xc7, 0x40, 0xe2, 0xae, 0x07, 0x12, 0xf7,
	0x6b, 0x20, 0x71, 0x5f, 0x87, 0xd2, 0xc2, 0xf5, 0x50, 0x5a, 0xf8, 0x39, 0x94, 0x16, 0x7a, 0x95,
	0xf0, 0xa7, 0x6d, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x7e, 0x5c, 0x38, 0x63, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BenchmarkerClient is the client API for Benchmarker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BenchmarkerClient interface {
	SetupBenchmarkSuite(ctx context.Context, in *SetupBenchmarkSuiteRequest, opts ...grpc.CallOption) (*SetupBenchmarkSuiteResponse, error)
	TearDownBenchmarkSuite(ctx context.Context, in *TearDownBenchmarkSuiteRequest, opts ...grpc.CallOption) (*TearDownBenchmarkSuiteResponse, error)
	SetupBenchmarkWorker(ctx context.Context, in *SetupBenchmarkWorkerRequest, opts ...grpc.CallOption) (*SetupBenchmarkWorkerResponse, error)
	TearDownBenchmarkWorker(ctx context.Context, in *TearDownBenchmarkWorkerRequest, opts ...grpc.CallOption) (*TearDownBenchmarkWorkerResponse, error)
	SetupBenchmark(ctx context.Context, in *SetupBenchmarkRequest, opts ...grpc.CallOption) (*SetupBenchmarkResponse, error)
	TearDownBenchmark(ctx context.Context, in *TearDownBenchmarkRequest, opts ...grpc.CallOption) (*TearDownBenchmarkResponse, error)
	StartBenchmark(ctx context.Context, in *StartBenchmarkRequest, opts ...grpc.CallOption) (*StartBenchmarkResponse, error)
	StopBenchmark(ctx context.Context, in *StopBenchmarkRequest, opts ...grpc.CallOption) (*StopBenchmarkResponse, error)
	ReportBenchmark(ctx context.Context, in *ReportBenchmarkRequest, opts ...grpc.CallOption) (*ReportBenchmarkResponse, error)
}

type benchmarkerClient struct {
	cc *grpc.ClientConn
}

func NewBenchmarkerClient(cc *grpc.ClientConn) BenchmarkerClient {
	return &benchmarkerClient{cc}
}

func (c *benchmarkerClient) SetupBenchmarkSuite(ctx context.Context, in *SetupBenchmarkSuiteRequest, opts ...grpc.CallOption) (*SetupBenchmarkSuiteResponse, error) {
	out := new(SetupBenchmarkSuiteResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Benchmarker/SetupBenchmarkSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkerClient) TearDownBenchmarkSuite(ctx context.Context, in *TearDownBenchmarkSuiteRequest, opts ...grpc.CallOption) (*TearDownBenchmarkSuiteResponse, error) {
	out := new(TearDownBenchmarkSuiteResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Benchmarker/TearDownBenchmarkSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkerClient) SetupBenchmarkWorker(ctx context.Context, in *SetupBenchmarkWorkerRequest, opts ...grpc.CallOption) (*SetupBenchmarkWorkerResponse, error) {
	out := new(SetupBenchmarkWorkerResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Benchmarker/SetupBenchmarkWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkerClient) TearDownBenchmarkWorker(ctx context.Context, in *TearDownBenchmarkWorkerRequest, opts ...grpc.CallOption) (*TearDownBenchmarkWorkerResponse, error) {
	out := new(TearDownBenchmarkWorkerResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Benchmarker/TearDownBenchmarkWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkerClient) SetupBenchmark(ctx context.Context, in *SetupBenchmarkRequest, opts ...grpc.CallOption) (*SetupBenchmarkResponse, error) {
	out := new(SetupBenchmarkResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Benchmarker/SetupBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkerClient) TearDownBenchmark(ctx context.Context, in *TearDownBenchmarkRequest, opts ...grpc.CallOption) (*TearDownBenchmarkResponse, error) {
	out := new(TearDownBenchmarkResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Benchmarker/TearDownBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkerClient) StartBenchmark(ctx context.Context, in *StartBenchmarkRequest, opts ...grpc.CallOption) (*StartBenchmarkResponse, error) {
	out := new(StartBenchmarkResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Benchmarker/StartBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkerClient) StopBenchmark(ctx context.Context, in *StopBenchmarkRequest, opts ...grpc.CallOption) (*StopBenchmarkResponse, error) {
	out := new(StopBenchmarkResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Benchmarker/StopBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkerClient) ReportBenchmark(ctx context.Context, in *ReportBenchmarkRequest, opts ...grpc.CallOption) (*ReportBenchmarkResponse, error) {
	out := new(ReportBenchmarkResponse)
	err := c.cc.Invoke(ctx, "/helmit.v1.Benchmarker/ReportBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchmarkerServer is the server API for Benchmarker service.
type BenchmarkerServer interface {
	SetupBenchmarkSuite(context.Context, *SetupBenchmarkSuiteRequest) (*SetupBenchmarkSuiteResponse, error)
	TearDownBenchmarkSuite(context.Context, *TearDownBenchmarkSuiteRequest) (*TearDownBenchmarkSuiteResponse, error)
	SetupBenchmarkWorker(context.Context, *SetupBenchmarkWorkerRequest) (*SetupBenchmarkWorkerResponse, error)
	TearDownBenchmarkWorker(context.Context, *TearDownBenchmarkWorkerRequest) (*TearDownBenchmarkWorkerResponse, error)
	SetupBenchmark(context.Context, *SetupBenchmarkRequest) (*SetupBenchmarkResponse, error)
	TearDownBenchmark(context.Context, *TearDownBenchmarkRequest) (*TearDownBenchmarkResponse, error)
	StartBenchmark(context.Context, *StartBenchmarkRequest) (*StartBenchmarkResponse, error)
	StopBenchmark(context.Context, *StopBenchmarkRequest) (*StopBenchmarkResponse, error)
	ReportBenchmark(context.Context, *ReportBenchmarkRequest) (*ReportBenchmarkResponse, error)
}

// UnimplementedBenchmarkerServer can be embedded to have forward compatible implementations.
type UnimplementedBenchmarkerServer struct {
}

func (*UnimplementedBenchmarkerServer) SetupBenchmarkSuite(ctx context.Context, req *SetupBenchmarkSuiteRequest) (*SetupBenchmarkSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupBenchmarkSuite not implemented")
}
func (*UnimplementedBenchmarkerServer) TearDownBenchmarkSuite(ctx context.Context, req *TearDownBenchmarkSuiteRequest) (*TearDownBenchmarkSuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownBenchmarkSuite not implemented")
}
func (*UnimplementedBenchmarkerServer) SetupBenchmarkWorker(ctx context.Context, req *SetupBenchmarkWorkerRequest) (*SetupBenchmarkWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupBenchmarkWorker not implemented")
}
func (*UnimplementedBenchmarkerServer) TearDownBenchmarkWorker(ctx context.Context, req *TearDownBenchmarkWorkerRequest) (*TearDownBenchmarkWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownBenchmarkWorker not implemented")
}
func (*UnimplementedBenchmarkerServer) SetupBenchmark(ctx context.Context, req *SetupBenchmarkRequest) (*SetupBenchmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupBenchmark not implemented")
}
func (*UnimplementedBenchmarkerServer) TearDownBenchmark(ctx context.Context, req *TearDownBenchmarkRequest) (*TearDownBenchmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownBenchmark not implemented")
}
func (*UnimplementedBenchmarkerServer) StartBenchmark(ctx context.Context, req *StartBenchmarkRequest) (*StartBenchmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBenchmark not implemented")
}
func (*UnimplementedBenchmarkerServer) StopBenchmark(ctx context.Context, req *StopBenchmarkRequest) (*StopBenchmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBenchmark not implemented")
}
func (*UnimplementedBenchmarkerServer) ReportBenchmark(ctx context.Context, req *ReportBenchmarkRequest) (*ReportBenchmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBenchmark not implemented")
}

func RegisterBenchmarkerServer(s *grpc.Server, srv BenchmarkerServer) {
	s.RegisterService(&_Benchmarker_serviceDesc, srv)
}

func _Benchmarker_SetupBenchmarkSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupBenchmarkSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkerServer).SetupBenchmarkSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Benchmarker/SetupBenchmarkSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkerServer).SetupBenchmarkSuite(ctx, req.(*SetupBenchmarkSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmarker_TearDownBenchmarkSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TearDownBenchmarkSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkerServer).TearDownBenchmarkSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Benchmarker/TearDownBenchmarkSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkerServer).TearDownBenchmarkSuite(ctx, req.(*TearDownBenchmarkSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmarker_SetupBenchmarkWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupBenchmarkWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkerServer).SetupBenchmarkWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Benchmarker/SetupBenchmarkWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkerServer).SetupBenchmarkWorker(ctx, req.(*SetupBenchmarkWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmarker_TearDownBenchmarkWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TearDownBenchmarkWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkerServer).TearDownBenchmarkWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Benchmarker/TearDownBenchmarkWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkerServer).TearDownBenchmarkWorker(ctx, req.(*TearDownBenchmarkWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmarker_SetupBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupBenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkerServer).SetupBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Benchmarker/SetupBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkerServer).SetupBenchmark(ctx, req.(*SetupBenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmarker_TearDownBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TearDownBenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkerServer).TearDownBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Benchmarker/TearDownBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkerServer).TearDownBenchmark(ctx, req.(*TearDownBenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmarker_StartBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkerServer).StartBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Benchmarker/StartBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkerServer).StartBenchmark(ctx, req.(*StartBenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmarker_StopBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopBenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkerServer).StopBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Benchmarker/StopBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkerServer).StopBenchmark(ctx, req.(*StopBenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmarker_ReportBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportBenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkerServer).ReportBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helmit.v1.Benchmarker/ReportBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkerServer).ReportBenchmark(ctx, req.(*ReportBenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Benchmarker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helmit.v1.Benchmarker",
	HandlerType: (*BenchmarkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupBenchmarkSuite",
			Handler:    _Benchmarker_SetupBenchmarkSuite_Handler,
		},
		{
			MethodName: "TearDownBenchmarkSuite",
			Handler:    _Benchmarker_TearDownBenchmarkSuite_Handler,
		},
		{
			MethodName: "SetupBenchmarkWorker",
			Handler:    _Benchmarker_SetupBenchmarkWorker_Handler,
		},
		{
			MethodName: "TearDownBenchmarkWorker",
			Handler:    _Benchmarker_TearDownBenchmarkWorker_Handler,
		},
		{
			MethodName: "SetupBenchmark",
			Handler:    _Benchmarker_SetupBenchmark_Handler,
		},
		{
			MethodName: "TearDownBenchmark",
			Handler:    _Benchmarker_TearDownBenchmark_Handler,
		},
		{
			MethodName: "StartBenchmark",
			Handler:    _Benchmarker_StartBenchmark_Handler,
		},
		{
			MethodName: "StopBenchmark",
			Handler:    _Benchmarker_StopBenchmark_Handler,
		},
		{
			MethodName: "ReportBenchmark",
			Handler:    _Benchmarker_ReportBenchmark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bench.proto",
}

func (m *SetupBenchmarkSuiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupBenchmarkSuiteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupBenchmarkSuiteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetupBenchmarkSuiteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupBenchmarkSuiteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupBenchmarkSuiteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TearDownBenchmarkSuiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TearDownBenchmarkSuiteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TearDownBenchmarkSuiteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TearDownBenchmarkSuiteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TearDownBenchmarkSuiteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TearDownBenchmarkSuiteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetupBenchmarkWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupBenchmarkWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupBenchmarkWorkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetupBenchmarkWorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupBenchmarkWorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupBenchmarkWorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TearDownBenchmarkWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TearDownBenchmarkWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TearDownBenchmarkWorkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TearDownBenchmarkWorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TearDownBenchmarkWorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TearDownBenchmarkWorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetupBenchmarkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupBenchmarkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupBenchmarkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Benchmark) > 0 {
		i -= len(m.Benchmark)
		copy(dAtA[i:], m.Benchmark)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Benchmark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetupBenchmarkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupBenchmarkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupBenchmarkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TearDownBenchmarkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TearDownBenchmarkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TearDownBenchmarkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Benchmark) > 0 {
		i -= len(m.Benchmark)
		copy(dAtA[i:], m.Benchmark)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Benchmark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TearDownBenchmarkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TearDownBenchmarkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TearDownBenchmarkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StartBenchmarkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartBenchmarkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartBenchmarkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != nil {
		{
			size, err := m.Timeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Parallelism != 0 {
		i = encodeVarintBench(dAtA, i, uint64(m.Parallelism))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Benchmark) > 0 {
		i -= len(m.Benchmark)
		copy(dAtA[i:], m.Benchmark)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Benchmark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartBenchmarkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartBenchmarkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartBenchmarkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StopBenchmarkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopBenchmarkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopBenchmarkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Benchmark) > 0 {
		i -= len(m.Benchmark)
		copy(dAtA[i:], m.Benchmark)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Benchmark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StopBenchmarkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopBenchmarkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopBenchmarkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReportBenchmarkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportBenchmarkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportBenchmarkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Benchmark) > 0 {
		i -= len(m.Benchmark)
		copy(dAtA[i:], m.Benchmark)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Benchmark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBench(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportBenchmarkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportBenchmarkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportBenchmarkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Report != nil {
		{
			size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BenchmarkReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BenchmarkReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BenchmarkReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.P99Latency != nil {
		{
			size, err := m.P99Latency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.P95Latency != nil {
		{
			size, err := m.P95Latency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.P75Latency != nil {
		{
			size, err := m.P75Latency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.P50Latency != nil {
		{
			size, err := m.P50Latency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MeanLatency != nil {
		{
			size, err := m.MeanLatency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Duration != nil {
		{
			size, err := m.Duration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBench(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Iterations != 0 {
		i = encodeVarintBench(dAtA, i, uint64(m.Iterations))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBench(dAtA []byte, offset int, v uint64) int {
	offset -= sovBench(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetupBenchmarkSuiteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *SetupBenchmarkSuiteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TearDownBenchmarkSuiteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *TearDownBenchmarkSuiteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetupBenchmarkWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *SetupBenchmarkWorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TearDownBenchmarkWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *TearDownBenchmarkWorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetupBenchmarkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	l = len(m.Benchmark)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *SetupBenchmarkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TearDownBenchmarkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	l = len(m.Benchmark)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *TearDownBenchmarkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StartBenchmarkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	l = len(m.Benchmark)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	if m.Parallelism != 0 {
		n += 1 + sovBench(uint64(m.Parallelism))
	}
	if m.Timeout != nil {
		l = m.Timeout.Size()
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *StartBenchmarkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StopBenchmarkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	l = len(m.Benchmark)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *StopBenchmarkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReportBenchmarkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	l = len(m.Benchmark)
	if l > 0 {
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *ReportBenchmarkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Report != nil {
		l = m.Report.Size()
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func (m *BenchmarkReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iterations != 0 {
		n += 1 + sovBench(uint64(m.Iterations))
	}
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovBench(uint64(l))
	}
	if m.MeanLatency != nil {
		l = m.MeanLatency.Size()
		n += 1 + l + sovBench(uint64(l))
	}
	if m.P50Latency != nil {
		l = m.P50Latency.Size()
		n += 1 + l + sovBench(uint64(l))
	}
	if m.P75Latency != nil {
		l = m.P75Latency.Size()
		n += 1 + l + sovBench(uint64(l))
	}
	if m.P95Latency != nil {
		l = m.P95Latency.Size()
		n += 1 + l + sovBench(uint64(l))
	}
	if m.P99Latency != nil {
		l = m.P99Latency.Size()
		n += 1 + l + sovBench(uint64(l))
	}
	return n
}

func sovBench(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBench(x uint64) (n int) {
	return sovBench(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetupBenchmarkSuiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupBenchmarkSuiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupBenchmarkSuiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupBenchmarkSuiteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupBenchmarkSuiteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupBenchmarkSuiteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TearDownBenchmarkSuiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TearDownBenchmarkSuiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TearDownBenchmarkSuiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TearDownBenchmarkSuiteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TearDownBenchmarkSuiteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TearDownBenchmarkSuiteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupBenchmarkWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupBenchmarkWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupBenchmarkWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupBenchmarkWorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupBenchmarkWorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupBenchmarkWorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TearDownBenchmarkWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TearDownBenchmarkWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TearDownBenchmarkWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TearDownBenchmarkWorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TearDownBenchmarkWorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TearDownBenchmarkWorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupBenchmarkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupBenchmarkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupBenchmarkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benchmark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Benchmark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupBenchmarkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupBenchmarkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupBenchmarkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TearDownBenchmarkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TearDownBenchmarkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TearDownBenchmarkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benchmark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Benchmark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TearDownBenchmarkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TearDownBenchmarkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TearDownBenchmarkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartBenchmarkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartBenchmarkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartBenchmarkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benchmark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Benchmark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parallelism", wireType)
			}
			m.Parallelism = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parallelism |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timeout == nil {
				m.Timeout = &types.Duration{}
			}
			if err := m.Timeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartBenchmarkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartBenchmarkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartBenchmarkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopBenchmarkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopBenchmarkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopBenchmarkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benchmark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Benchmark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopBenchmarkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopBenchmarkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopBenchmarkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportBenchmarkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportBenchmarkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportBenchmarkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benchmark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Benchmark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportBenchmarkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportBenchmarkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportBenchmarkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Report == nil {
				m.Report = &BenchmarkReport{}
			}
			if err := m.Report.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BenchmarkReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBench
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BenchmarkReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BenchmarkReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iterations", wireType)
			}
			m.Iterations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iterations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &types.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeanLatency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MeanLatency == nil {
				m.MeanLatency = &types.Duration{}
			}
			if err := m.MeanLatency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P50Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.P50Latency == nil {
				m.P50Latency = &types.Duration{}
			}
			if err := m.P50Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P75Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.P75Latency == nil {
				m.P75Latency = &types.Duration{}
			}
			if err := m.P75Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P95Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.P95Latency == nil {
				m.P95Latency = &types.Duration{}
			}
			if err := m.P95Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P99Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBench
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBench
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBench
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.P99Latency == nil {
				m.P99Latency = &types.Duration{}
			}
			if err := m.P99Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBench(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBench
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBench(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBench
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBench
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBench
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBench
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBench
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBench
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBench        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBench          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBench = fmt.Errorf("proto: unexpected end of group")
)
