// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helm/helm.proto

package helm

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_SUCCEED Status = 0
	Status_FAILED  Status = 1
)

var Status_name = map[int32]string{
	0: "SUCCEED",
	1: "FAILED",
}

var Status_value = map[string]int32{
	"SUCCEED": 0,
	"FAILED":  1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0fdca3c61ed7b233, []int{0}
}

// HelmUninstallRequest an uninstall helm chart request
type HelmUninstallRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *HelmUninstallRequest) Reset()         { *m = HelmUninstallRequest{} }
func (m *HelmUninstallRequest) String() string { return proto.CompactTextString(m) }
func (*HelmUninstallRequest) ProtoMessage()    {}
func (*HelmUninstallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fdca3c61ed7b233, []int{0}
}
func (m *HelmUninstallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelmUninstallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelmUninstallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelmUninstallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelmUninstallRequest.Merge(m, src)
}
func (m *HelmUninstallRequest) XXX_Size() int {
	return m.Size()
}
func (m *HelmUninstallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelmUninstallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelmUninstallRequest proto.InternalMessageInfo

func (m *HelmUninstallRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// HelmUninstallResponse an uninstall helm chart response
type HelmUninstallResponse struct {
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=onos.test.helm.Status" json:"status,omitempty"`
}

func (m *HelmUninstallResponse) Reset()         { *m = HelmUninstallResponse{} }
func (m *HelmUninstallResponse) String() string { return proto.CompactTextString(m) }
func (*HelmUninstallResponse) ProtoMessage()    {}
func (*HelmUninstallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fdca3c61ed7b233, []int{1}
}
func (m *HelmUninstallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelmUninstallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelmUninstallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelmUninstallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelmUninstallResponse.Merge(m, src)
}
func (m *HelmUninstallResponse) XXX_Size() int {
	return m.Size()
}
func (m *HelmUninstallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelmUninstallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelmUninstallResponse proto.InternalMessageInfo

func (m *HelmUninstallResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_SUCCEED
}

// HelmChart helm chart information
type HelmChart struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Repository string `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (m *HelmChart) Reset()         { *m = HelmChart{} }
func (m *HelmChart) String() string { return proto.CompactTextString(m) }
func (*HelmChart) ProtoMessage()    {}
func (*HelmChart) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fdca3c61ed7b233, []int{2}
}
func (m *HelmChart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelmChart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelmChart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelmChart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelmChart.Merge(m, src)
}
func (m *HelmChart) XXX_Size() int {
	return m.Size()
}
func (m *HelmChart) XXX_DiscardUnknown() {
	xxx_messageInfo_HelmChart.DiscardUnknown(m)
}

var xxx_messageInfo_HelmChart proto.InternalMessageInfo

func (m *HelmChart) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelmChart) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

// HelmReleaseRequest a request for installing a helm chart
type HelmReleaseRequest struct {
	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	SkipCRDs  bool              `protobuf:"varint,3,opt,name=skipCRDs,proto3" json:"skipCRDs,omitempty"`
	Chart     *HelmChart        `protobuf:"bytes,4,opt,name=chart,proto3" json:"chart,omitempty"`
	Wait      bool              `protobuf:"varint,5,opt,name=wait,proto3" json:"wait,omitempty"`
	Values    map[string]string `protobuf:"bytes,6,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HelmReleaseRequest) Reset()         { *m = HelmReleaseRequest{} }
func (m *HelmReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*HelmReleaseRequest) ProtoMessage()    {}
func (*HelmReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fdca3c61ed7b233, []int{3}
}
func (m *HelmReleaseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelmReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelmReleaseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelmReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelmReleaseRequest.Merge(m, src)
}
func (m *HelmReleaseRequest) XXX_Size() int {
	return m.Size()
}
func (m *HelmReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelmReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelmReleaseRequest proto.InternalMessageInfo

func (m *HelmReleaseRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelmReleaseRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *HelmReleaseRequest) GetSkipCRDs() bool {
	if m != nil {
		return m.SkipCRDs
	}
	return false
}

func (m *HelmReleaseRequest) GetChart() *HelmChart {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *HelmReleaseRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

func (m *HelmReleaseRequest) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

// HelmReleaseResponse a response to a HelmReleaseRequest
type HelmReleaseResponse struct {
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=onos.test.helm.Status" json:"status,omitempty"`
}

func (m *HelmReleaseResponse) Reset()         { *m = HelmReleaseResponse{} }
func (m *HelmReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*HelmReleaseResponse) ProtoMessage()    {}
func (*HelmReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fdca3c61ed7b233, []int{4}
}
func (m *HelmReleaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelmReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelmReleaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelmReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelmReleaseResponse.Merge(m, src)
}
func (m *HelmReleaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *HelmReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelmReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelmReleaseResponse proto.InternalMessageInfo

func (m *HelmReleaseResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_SUCCEED
}

func init() {
	proto.RegisterEnum("onos.test.helm.Status", Status_name, Status_value)
	proto.RegisterType((*HelmUninstallRequest)(nil), "onos.test.helm.HelmUninstallRequest")
	proto.RegisterType((*HelmUninstallResponse)(nil), "onos.test.helm.HelmUninstallResponse")
	proto.RegisterType((*HelmChart)(nil), "onos.test.helm.HelmChart")
	proto.RegisterType((*HelmReleaseRequest)(nil), "onos.test.helm.HelmReleaseRequest")
	proto.RegisterMapType((map[string]string)(nil), "onos.test.helm.HelmReleaseRequest.ValuesEntry")
	proto.RegisterType((*HelmReleaseResponse)(nil), "onos.test.helm.HelmReleaseResponse")
}

func init() { proto.RegisterFile("helm/helm.proto", fileDescriptor_0fdca3c61ed7b233) }

var fileDescriptor_0fdca3c61ed7b233 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x8b, 0xd4, 0x40,
	0x10, 0x4d, 0xcf, 0x47, 0x76, 0x53, 0x81, 0x75, 0x28, 0x57, 0x89, 0x41, 0x42, 0x8c, 0x0a, 0x61,
	0x0f, 0xbd, 0x10, 0x2f, 0xea, 0x45, 0x34, 0x93, 0xd5, 0x05, 0x4f, 0xbd, 0xac, 0x78, 0x6d, 0x97,
	0x86, 0x0d, 0x9b, 0x49, 0x62, 0xba, 0x47, 0x99, 0x7f, 0xe1, 0xef, 0xf0, 0xec, 0x8f, 0xf0, 0xb8,
	0x47, 0x8f, 0x32, 0xf3, 0x47, 0xa4, 0x3b, 0x61, 0x9c, 0x19, 0x86, 0x19, 0xd8, 0x4b, 0x52, 0xfd,
	0xfa, 0xd5, 0x7b, 0xf5, 0x48, 0x05, 0xee, 0x5d, 0x8b, 0x62, 0x72, 0xaa, 0x1f, 0xb4, 0x6e, 0x2a,
	0x55, 0xe1, 0x51, 0x55, 0x56, 0x92, 0x2a, 0x21, 0x15, 0xd5, 0x68, 0x74, 0x02, 0xc7, 0x1f, 0x44,
	0x31, 0xb9, 0x2c, 0xf3, 0x52, 0x2a, 0x5e, 0x14, 0x4c, 0x7c, 0x9d, 0x0a, 0xa9, 0x10, 0x61, 0x50,
	0xf2, 0x89, 0xf0, 0x48, 0x48, 0x62, 0x87, 0x99, 0x3a, 0x7a, 0x0f, 0x0f, 0x36, 0xb8, 0xb2, 0xae,
	0x4a, 0x29, 0x90, 0x82, 0x2d, 0x15, 0x57, 0x53, 0x69, 0xe8, 0x47, 0xc9, 0x43, 0xba, 0xee, 0x42,
	0x2f, 0xcc, 0x2d, 0xeb, 0x58, 0xd1, 0x1b, 0x70, 0xb4, 0x50, 0x7a, 0xcd, 0x9b, 0xad, 0x4e, 0x18,
	0x00, 0x34, 0xa2, 0xae, 0x64, 0xae, 0xaa, 0x66, 0xe6, 0xf5, 0xcc, 0xcd, 0x0a, 0x12, 0xfd, 0xec,
	0x01, 0x6a, 0x05, 0x26, 0x0a, 0xc1, 0xa5, 0xd8, 0x31, 0x34, 0x3e, 0x06, 0x47, 0xbf, 0x65, 0xcd,
	0xaf, 0x44, 0xa7, 0xf4, 0x1f, 0x40, 0x1f, 0x0e, 0xe5, 0x4d, 0x5e, 0xa7, 0x6c, 0x2c, 0xbd, 0x7e,
	0x48, 0xe2, 0x43, 0xb6, 0x3c, 0xe3, 0x29, 0x0c, 0xaf, 0xf4, 0x84, 0xde, 0x20, 0x24, 0xb1, 0x9b,
	0x3c, 0xda, 0x0c, 0xb5, 0x8c, 0xc0, 0x5a, 0x9e, 0xb6, 0xff, 0xce, 0x73, 0xe5, 0x0d, 0x8d, 0x90,
	0xa9, 0xf1, 0x0c, 0xec, 0x6f, 0xbc, 0x98, 0x0a, 0xe9, 0xd9, 0x61, 0x3f, 0x76, 0x13, 0xba, 0x4d,
	0x65, 0x3d, 0x06, 0xfd, 0x64, 0x1a, 0xb2, 0x52, 0x35, 0x33, 0xd6, 0x75, 0xfb, 0xaf, 0xc0, 0x5d,
	0x81, 0x71, 0x04, 0xfd, 0x1b, 0x31, 0xeb, 0x82, 0xea, 0x12, 0x8f, 0x61, 0x68, 0xa8, 0x5d, 0xc6,
	0xf6, 0xf0, 0xba, 0xf7, 0x92, 0x44, 0x19, 0xdc, 0x5f, 0x33, 0xb9, 0xdb, 0x47, 0x3b, 0x79, 0x02,
	0x76, 0x8b, 0xa0, 0x0b, 0x07, 0x17, 0x97, 0x69, 0x9a, 0x65, 0xe3, 0x91, 0x85, 0x00, 0xf6, 0xd9,
	0xdb, 0xf3, 0x8f, 0xd9, 0x78, 0x44, 0x92, 0x5f, 0x04, 0x06, 0xda, 0x0a, 0x19, 0x1c, 0x9c, 0xb7,
	0x3b, 0x82, 0xd1, 0xfe, 0xc0, 0xfe, 0xd3, 0x9d, 0x9c, 0x6e, 0xde, 0xcf, 0xe0, 0x2c, 0x37, 0x0f,
	0x9f, 0x6d, 0xeb, 0xd8, 0x5c, 0x62, 0xff, 0xf9, 0x1e, 0x56, 0xab, 0xfc, 0xce, 0xfb, 0x3d, 0x0f,
	0xc8, 0xed, 0x3c, 0x20, 0x7f, 0xe7, 0x01, 0xf9, 0xb1, 0x08, 0xac, 0xdb, 0x45, 0x60, 0xfd, 0x59,
	0x04, 0xd6, 0x17, 0xdb, 0xfc, 0x34, 0x2f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x66, 0x73,
	0x02, 0x47, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelmClient is the client API for Helm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelmClient interface {
	// Install installs a helm chart
	Install(ctx context.Context, in *HelmReleaseRequest, opts ...grpc.CallOption) (*HelmReleaseResponse, error)
	// Uninstall uninstall a helm chart
	Uninstall(ctx context.Context, in *HelmUninstallRequest, opts ...grpc.CallOption) (*HelmUninstallResponse, error)
}

type helmClient struct {
	cc *grpc.ClientConn
}

func NewHelmClient(cc *grpc.ClientConn) HelmClient {
	return &helmClient{cc}
}

func (c *helmClient) Install(ctx context.Context, in *HelmReleaseRequest, opts ...grpc.CallOption) (*HelmReleaseResponse, error) {
	out := new(HelmReleaseResponse)
	err := c.cc.Invoke(ctx, "/onos.test.helm.Helm/Install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helmClient) Uninstall(ctx context.Context, in *HelmUninstallRequest, opts ...grpc.CallOption) (*HelmUninstallResponse, error) {
	out := new(HelmUninstallResponse)
	err := c.cc.Invoke(ctx, "/onos.test.helm.Helm/Uninstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelmServer is the server API for Helm service.
type HelmServer interface {
	// Install installs a helm chart
	Install(context.Context, *HelmReleaseRequest) (*HelmReleaseResponse, error)
	// Uninstall uninstall a helm chart
	Uninstall(context.Context, *HelmUninstallRequest) (*HelmUninstallResponse, error)
}

// UnimplementedHelmServer can be embedded to have forward compatible implementations.
type UnimplementedHelmServer struct {
}

func (*UnimplementedHelmServer) Install(ctx context.Context, req *HelmReleaseRequest) (*HelmReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (*UnimplementedHelmServer) Uninstall(ctx context.Context, req *HelmUninstallRequest) (*HelmUninstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uninstall not implemented")
}

func RegisterHelmServer(s *grpc.Server, srv HelmServer) {
	s.RegisterService(&_Helm_serviceDesc, srv)
}

func _Helm_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelmReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.helm.Helm/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmServer).Install(ctx, req.(*HelmReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Helm_Uninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelmUninstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelmServer).Uninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.helm.Helm/Uninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelmServer).Uninstall(ctx, req.(*HelmUninstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Helm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.test.helm.Helm",
	HandlerType: (*HelmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Install",
			Handler:    _Helm_Install_Handler,
		},
		{
			MethodName: "Uninstall",
			Handler:    _Helm_Uninstall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helm/helm.proto",
}

func (m *HelmUninstallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelmUninstallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelmUninstallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHelm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelmUninstallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelmUninstallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelmUninstallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintHelm(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HelmChart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelmChart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelmChart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Repository) > 0 {
		i -= len(m.Repository)
		copy(dAtA[i:], m.Repository)
		i = encodeVarintHelm(dAtA, i, uint64(len(m.Repository)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHelm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelmReleaseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelmReleaseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelmReleaseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k := range m.Values {
			v := m.Values[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHelm(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHelm(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHelm(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Wait {
		i--
		if m.Wait {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Chart != nil {
		{
			size, err := m.Chart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHelm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SkipCRDs {
		i--
		if m.SkipCRDs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintHelm(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHelm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelmReleaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelmReleaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelmReleaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintHelm(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHelm(dAtA []byte, offset int, v uint64) int {
	offset -= sovHelm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelmUninstallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHelm(uint64(l))
	}
	return n
}

func (m *HelmUninstallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovHelm(uint64(m.Status))
	}
	return n
}

func (m *HelmChart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHelm(uint64(l))
	}
	l = len(m.Repository)
	if l > 0 {
		n += 1 + l + sovHelm(uint64(l))
	}
	return n
}

func (m *HelmReleaseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHelm(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovHelm(uint64(l))
	}
	if m.SkipCRDs {
		n += 2
	}
	if m.Chart != nil {
		l = m.Chart.Size()
		n += 1 + l + sovHelm(uint64(l))
	}
	if m.Wait {
		n += 2
	}
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHelm(uint64(len(k))) + 1 + len(v) + sovHelm(uint64(len(v)))
			n += mapEntrySize + 1 + sovHelm(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HelmReleaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovHelm(uint64(m.Status))
	}
	return n
}

func sovHelm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHelm(x uint64) (n int) {
	return sovHelm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HelmUninstallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHelm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelmUninstallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelmUninstallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHelm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHelm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHelm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHelm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHelm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelmUninstallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHelm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelmUninstallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelmUninstallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHelm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHelm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHelm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelmChart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHelm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelmChart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelmChart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHelm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHelm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHelm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHelm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repository = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHelm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHelm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHelm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelmReleaseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHelm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelmReleaseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelmReleaseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHelm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHelm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHelm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHelm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCRDs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCRDs = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHelm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHelm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chart == nil {
				m.Chart = &HelmChart{}
			}
			if err := m.Chart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wait = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHelm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHelm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHelm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHelm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHelm
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHelm
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHelm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHelm
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHelm
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHelm(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHelm
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHelm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHelm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHelm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelmReleaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHelm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelmReleaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelmReleaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHelm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHelm
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHelm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHelm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHelm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHelm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHelm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHelm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHelm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHelm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHelm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHelm = fmt.Errorf("proto: unexpected end of group")
)
